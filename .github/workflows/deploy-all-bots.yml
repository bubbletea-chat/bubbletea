name: Deploy All Bots to Cloud Run (Manual)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all Docker images'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  deploy-all:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY1 }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-east1-docker.pkg.dev --quiet

    - name: Detect all bots
      id: detect_all_bots
      shell: bash
      run: |
        set -euo pipefail

        ALL_BOTS=""
        for dir in bots/*/; do
          dir="${dir%/}"
          bot_name="${dir#bots/}"
          if [[ -f "$dir/bot.py" && -f "$dir/requirements.txt" ]]; then
            ALL_BOTS+="$bot_name"$'\n'
          fi
        done

        ALL_BOTS="$(printf '%s' "$ALL_BOTS" | sed '/^$/d' | sort -u)"

        if [[ -z "$ALL_BOTS" ]]; then
          echo "No bots found in repository!"
          exit 1
        fi

        echo "Found bots:"
        echo "$ALL_BOTS"

        {
          echo "all_bots<<EOF"
          printf '%s\n' "$ALL_BOTS"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Build and push Docker images for all bots
      shell: bash
      run: |
        set -euo pipefail
        [[ -f "bots/Dockerfile" ]] || { echo "bots/Dockerfile not found!"; exit 1; }

        while IFS= read -r BOT_NAME; do
          [[ -z "${BOT_NAME:-}" ]] && continue

          IMAGE_TAG="us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/bots-repo/$BOT_NAME"

          echo "Building Docker image for $BOT_NAME..."
          docker build \
            --build-arg BOT_DIR="bots/$BOT_NAME" \
            -f bots/Dockerfile \
            -t "$IMAGE_TAG:${GITHUB_SHA}" \
            -t "$IMAGE_TAG:latest" \
            .

          echo "Pushing Docker image for $BOT_NAME..."
          docker push "$IMAGE_TAG:${GITHUB_SHA}"
          docker push "$IMAGE_TAG:latest"

        done <<< "${{ steps.detect_all_bots.outputs.all_bots }}"

    - name: Deploy all bots to Cloud Run + Slack notify
      shell: bash
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        chmod +x .github/scripts/deploy-and-notify.sh
        .github/scripts/deploy-and-notify.sh "${{ steps.detect_all_bots.outputs.all_bots }}"

    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "All bots from main branch have been processed for deployment." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Bots processed:" >> $GITHUB_STEP_SUMMARY
        while IFS= read -r BOT_NAME; do
          [[ -z "${BOT_NAME:-}" ]] && continue
          echo "- $BOT_NAME" >> $GITHUB_STEP_SUMMARY
        done <<< "${{ steps.detect_all_bots.outputs.all_bots }}"